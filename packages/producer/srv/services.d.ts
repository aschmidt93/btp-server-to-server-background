/* eslint-disable @typescript-eslint/no-unused-vars */

/* eslint-disable @typescript-eslint/no-explicit-any */

/* eslint-disable @typescript-eslint/no-redundant-type-constituents */
import {
  ActionEventHandler,
  ApplicationService,
  CdsFunction,
  DatabaseService,
  Service,
  connect as _connect,
  services as _services,
} from "@sap/cds";

import type * as ProducerService from "../@cds-models/ProducerService";

declare module "@sap/cds" {
  // We overwrite the `cds.services` definition, such that we have type safety
  export const services: ServiceMapping;

  /**
   * Event Handler for an action/function of a service
   */
  export type ActionFunctionHandler<T extends CdsFunction> = ActionEventHandler<
    T["__parameters"],
    T["__returns"]
  >;

  /**
   * Can be used for Service Handler to implement. This ensures that every action and function
   * is implemented.
   */
  export type ServiceHandler<T extends ServiceDefinition> = {
    [key in keyof T as T[key] extends ActionFunctionDef
      ? key extends string
        ? `on${Capitalize<key>}`
        : never
      : never]: T[key] extends ActionFunctionDef ? ActionFunctionHandler<T[key]> : never;
  };

  /**
   * Definition of a service as generated by cds-typer
   */
  export type ServiceDefinition = {
    [key: string]:
      | ActionFunctionDef
      | EventDef
      | EntityDefinition
      | EntitySetDefinition<any>
      | unknown;
  };

  type ActionFunctionDef = {
    __returns: any;
    __parameters: any;
    (...args: any): any;
    kind: "action" | "function";
  };

  export type ServiceActionsFunctions<T extends ServiceDefinition> = {
    [key in keyof T as T[key] extends ActionFunctionDef
      ? key
      : never]: T[key] extends ActionFunctionDef ? T[key] : never;
  };

  type EventDef = new () => Record<string, any>;

  /**
   * Definition of a single entity (row in a table) as generated by cds-typer
   */
  export type EntityDefinition = { new (...args: any[]): any; readonly actions: Record<any, any> };

  /**
   * Definition of an entity set as generated by cds-typer
   */
  export type EntitySetDefinition<T extends InstanceType<EntityDefinition>> = {
    new (...args: any[]): Array<T>;
  };

  /**
   * Resolves to `true` if `T` is an EventDef
   */
  type IsEventDef<T> = T extends EntityDefinition
    ? false
    : T extends EntitySetDefinition<infer _>
      ? false
      : T extends EventDef
        ? true
        : false;

  /**
   * Available events in a service
   */
  export type ServiceEvents<T extends ServiceDefinition> = {
    [key in keyof T as IsEventDef<T[key]> extends true
      ? key
      : never]: T[key] extends new () => infer U ? U : never;
  };

  /**
   * Available entity sets of a service
   */
  export type ServiceEntitySets<T extends ServiceDefinition> = {
    [K in keyof T as T[K] extends EntitySetDefinition<infer U>
      ? K
      : never]: T[K] extends EntitySetDefinition<infer U> ? EntitySetDefinition<U> : never;
  };

  type ActionFunctionParam<F extends ActionFunctionDef> =
    F["__parameters"] extends Record<string, never> ? undefined : F["__parameters"];

  type ActionFunctionReturn<F extends ActionFunctionDef> = F["__returns"];

  // @ts-expect-error overwrite type
  class ApplicationService<T extends ServiceDefinition> extends Service {
    send: {
      <E extends keyof ServiceActionsFunctions<T>>(
        event: E,
        ...data: ActionFunctionParam<ServiceActionsFunctions<T>[E]> extends undefined
          ? []
          : [ActionFunctionParam<ServiceActionsFunctions<T>[E]>]
      ): Promise<ActionFunctionReturn<ServiceActionsFunctions<T>[E]>>;
    };
    emit: {
      <E extends keyof ServiceEvents<T>>(details: {
        event: E;
        data?: ServiceEvents<T>[E];
        headers?: object;
      }): Promise<T>;
      <E extends keyof ServiceEvents<T>>(
        event: E,
        data?: ServiceEvents<T>[E],
        headers?: object
      ): Promise<T>;
    };
  }

  type ServiceMapping = {
    db: DatabaseService;
    ProducerService: ApplicationService<typeof ProducerService>;
    [name: string]: ApplicationService<any>;
  };
}
